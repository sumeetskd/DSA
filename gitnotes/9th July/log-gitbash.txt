sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ cd .git

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ ls
COMMIT_EDITMSG  config       hooks/  info/  objects/     refs/
HEAD            description  index   logs/  packed-refs

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ cat /refs/heads/main
cat: /refs/heads/main: No such file or directory

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ cat head
ref: refs/heads/feature/lesson

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ ^C

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ cat  refs/heads/feature/lesson
ce0e907d1a0f303d0363c096f8c73846b39cdf09

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ git checkout testing
fatal: this operation must be run in a work tree

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ git checkout main
fatal: this operation must be run in a work tree

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ pwd
/c/Users/sumee/Downloads/GIT/DSA/.git

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ cd..
bash: cd..: command not found

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/.git (GIT_DIR!)
$ cd ..

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git checkout testing
error: pathspec 'testing' did not match any file(s) known to git

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git checkout new-graph
error: Your local changes to the following files would be overwritten by checkout:
        test2.txt
Please commit your changes or stash them before you switch branches.
Aborting

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git branch
* feature/lesson
  main

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git commit -m 'cmt'
On branch feature/lesson
Your branch is up to date with 'origin/feature/lesson'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   test2.txt

no changes added to commit (use "git add" and/or "git commit -a")

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git add
Nothing specified, nothing added.
hint: Maybe you wanted to say 'git add .'?
hint: Turn this message off by running
hint: "git config advice.addEmptyPathspec false"

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git push
Everything up-to-date

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git checkout git-notes
error: pathspec 'git-notes' did not match any file(s) known to git

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git origin
git: 'origin' is not a git command. See 'git --help'.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git fetch -o
error: switch `o' requires a value

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git fetch origin
remote: Enumerating objects: 1, done.
remote: Counting objects: 100% (1/1), done.
remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (1/1), 649 bytes | 36.00 KiB/s, done.
From https://github.com/sumeetskd/DSA
 * [new branch]      git-notes  -> origin/git-notes
   aa5e0d4..2ca871f  main       -> origin/main

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
$ git checkout git-notes
Switched to a new branch 'git-notes'
M       test2.txt
branch 'git-notes' set up to track 'origin/git-notes'.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git branch
  feature/lesson
* git-notes
  main

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ mkdir gitnotes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cd gitnotes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/gitnotes (git-notes)
$ touch week3.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/gitnotes (git-notes)
$ cat .git
cat: .git: No such file or directory

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/gitnotes (git-notes)
$ .git
bash: .git: command not found

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/gitnotes (git-notes)
$ cat .git/head
cat: .git/head: No such file or directory

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/gitnotes (git-notes)
$ cd..
bash: cd..: command not found

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA/gitnotes (git-notes)
$ cd ..

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
README.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cat .git/head
ref: refs/heads/git-notes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ vm readme
bash: vm: command not found

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ vm README.md
bash: vm: command not found

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ vim README.md

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cat .git/head
ref: refs/heads/git-notes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ^C

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cat refs/heads/git-notes
cat: refs/heads/git-notes: No such file or directory

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cat .git/refs/heads/git-notes
2ca871f8161d539bbfc05005131a0d6c02b13d16

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git status
On branch git-notes
Your branch is up to date with 'origin/git-notes'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   README.md
        modified:   test2.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        gitnotes/

no changes added to commit (use "git add" and/or "git commit -a")

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git add .

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git commit -m 'minor update'
[git-notes 3789202] minor update
 3 files changed, 52 insertions(+), 1 deletion(-)
 create mode 100644 gitnotes/week3.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cat .git/refs/heads/git-notes
3789202a502a2f6d48385bb98119430866d83aeb

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git push
To https://github.com/sumeetskd/DSA.git
 ! [rejected]        git-notes -> git-notes (fetch first)
error: failed to push some refs to 'https://github.com/sumeetskd/DSA.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git fetch
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 1.36 KiB | 48.00 KiB/s, done.
From https://github.com/sumeetskd/DSA
   2ca871f..839f4db  git-notes  -> origin/git-notes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git status
On branch git-notes
Your branch and 'origin/git-notes' have diverged,
and have 1 and 1 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        gitnotes/Head/

nothing added to commit but untracked files present (use "git add" to track)

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git add
Nothing specified, nothing added.
hint: Maybe you wanted to say 'git add .'?
hint: Turn this message off by running
hint: "git config advice.addEmptyPathspec false"

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git push
To https://github.com/sumeetskd/DSA.git
 ! [rejected]        git-notes -> git-notes (non-fast-forward)
error: failed to push some refs to 'https://github.com/sumeetskd/DSA.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git fetch origin

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
README.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git fetch -o
error: switch `o' requires a value

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git fetch -o git-notes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
README.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git checkout main
Switched to branch 'main'
Your branch is behind 'origin/main' by 2 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (main)
$ git checkout git-notes
Switched to branch 'git-notes'
Your branch and 'origin/git-notes' have diverged,
and have 1 and 1 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git fetch origin

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
README.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git branch
  feature/lesson
* git-notes
  main

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git status
On branch git-notes
Your branch and 'origin/git-notes' have diverged,
and have 1 and 1 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        gitnotes/Head/

nothing added to commit but untracked files present (use "git add" to track)

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git commit -m 'adding'
On branch git-notes
Your branch and 'origin/git-notes' have diverged,
and have 1 and 1 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        gitnotes/Head/

nothing added to commit but untracked files present (use "git add" to track)

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git pull
Merge made by the 'ort' strategy.
 HeadRead.md | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)
 create mode 100644 HeadRead.md

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
HeadRead.md  README.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git commit -m 'adding changes'
On branch git-notes
Your branch is ahead of 'origin/git-notes' by 2 commits.
  (use "git push" to publish your local commits)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        gitnotes/Head/

nothing added to commit but untracked files present (use "git add" to track)

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git push
Enumerating objects: 13, done.
Counting objects: 100% (11/11), done.
Delta compression using up to 12 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (7/7), 1.31 KiB | 1.31 MiB/s, done.
Total 7 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/sumeetskd/DSA.git
   839f4db..fd65ea5  git-notes -> git-notes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
HeadRead.md  README.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git status
On branch git-notes
Your branch is up to date with 'origin/git-notes'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        gitnotes/Head/

nothing added to commit but untracked files present (use "git add" to track)

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git commit -m 'adding gitnotes/Head/
> '
On branch git-notes
Your branch is up to date with 'origin/git-notes'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        gitnotes/Head/

nothing added to commit but untracked files present (use "git add" to track)

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git add
Nothing specified, nothing added.
hint: Maybe you wanted to say 'git add .'?
hint: Turn this message off by running
hint: "git config advice.addEmptyPathspec false"

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git add .

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git commit -m 'adding gitnotes/head'
[git-notes 0fcabc4] adding gitnotes/head
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 gitnotes/Head/Head.txt.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git status
On branch git-notes
Your branch is ahead of 'origin/git-notes' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git push
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 12 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 406 bytes | 406.00 KiB/s, done.
Total 4 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/sumeetskd/DSA.git
   fd65ea5..0fcabc4  git-notes -> git-notes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
HeadRead.md  README.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls -la
total 21
drwxr-xr-x 1 sumee 197609    0 Jul  8 23:41 ./
drwxr-xr-x 1 sumee 197609    0 Jul  4 02:20 ../
drwxr-xr-x 1 sumee 197609    0 Jul  8 23:45 .git/
-rw-r--r-- 1 sumee 197609 1756 Jul  8 23:41 HeadRead.md
-rw-r--r-- 1 sumee 197609   53 Jul  8 23:40 README.md
drwxr-xr-x 1 sumee 197609    0 Jul  8 23:40 gitnotes/
-rw-r--r-- 1 sumee 197609 1608 Jul  8 23:40 test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ touch gitdiff.md

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
HeadRead.md  README.md  gitdiff.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ vim gitdiff.md

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cat gitdiff.md
**Updating GIT DIFF**


sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git diff

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git diff HEAD

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ vim README.md

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git diff
diff --git a/README.md b/README.md
index b784b50..b68e850 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,3 @@
 #adding minor update!
 DSA Problems, Key Notes, etc
+GIT Important Notes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git log --pretty=oneline
0fcabc414b9b21a573fbf16b83c8cb38c0778631 (HEAD -> git-notes, origin/git-notes) adding gitnotes/head
fd65ea53a605fdfc6952860714a791ef149d57bc Merge branch 'git-notes' of https://github.com/sumeetskd/DSA into git-notes
839f4db091ea4daca3cbc046c002d6ea6990bc3a Create HeadRead.md
3789202a502a2f6d48385bb98119430866d83aeb minor update
2ca871f8161d539bbfc05005131a0d6c02b13d16 (origin/main, origin/HEAD) Merge pull request #1 from sumeetskd/feature/lesson
ce0e907d1a0f303d0363c096f8c73846b39cdf09 (origin/feature/lesson, feature/lesson) Add test2.txt to the branch
aa5e0d480c0740f34272e62ddf1f1a8c238f97e0 (main) Initial commit

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git branch
  feature/lesson
* git-notes
  main

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git diff main git-notes
diff --git a/HeadRead.md b/HeadRead.md
new file mode 100644
index 0000000..95c625b
--- /dev/null
+++ b/HeadRead.md
@@ -0,0 +1,17 @@
+*These points provide an overview of how the "head" pointer works in Git to track the current branch and how it changes when switching branches and making commits.*
+
+**Here are the important points:**
+
+- The ".git" folder in a project is responsible for tracking changes across the project.
+- The "head" file inside the ".git" folder is a special pointer that indicates the current branch you're working on.
+- To identify the current commit, you can navigate to the ".git" folder in the terminal using the command "cd .git" and view the contents of the "HEAD" file using the command "cat HEAD".
+- In Git, you typically work on a single branch at a time, and the branch information is stored in the "refs/heads" directory within the ".git" folder.
+- By switching branches using the "git checkout" command (e.g., "git checkout testing"), the "head" pointer moves to point to the new branch.
+- The contents of the "head" file can be checked using the command "less .git/head", which reflects the current branch.
+- The "head" file contains a reference to the current commit, and changing branches will update this reference.
+- The command "git branch" shows the list of branches, and "git checkout <branch>" is used to switch branches.
+- When making changes to files within the working directory, the commit's hash ID in the "head" file will change after committing.
+- The command "git status" shows the modified files, and "git add" and "git commit" are used to stage and commit changes, respectively.
+- The hash ID in the "refs/heads" file for a branch will be updated to reflect the latest commit in that branch after a commit is made.
+- The "head" pointer can be changed to point to a different branch using the "git checkout" command.
+
diff --git a/README.md b/README.md
index 4a057c5..b784b50 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,2 @@
-# DSA
+#adding minor update!
 DSA Problems, Key Notes, etc
diff --git a/gitnotes/Head/Head.txt.txt b/gitnotes/Head/Head.txt.txt
new file mode 100644
index 0000000..e69de29
diff --git a/gitnotes/week3.txt b/gitnotes/week3.txt
new file mode 100644
index 0000000..e69de29
diff --git a/test2.txt b/test2.txt
new file mode 100644
index 0000000..616f61c
--- /dev/null
+++ b/test2.txt
@@ -0,0 +1,51 @@
+$ git push -u origin feature/lesson
+
+
+sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (main)
+$ git status
+On branch main
+Your branch is up to date with 'origin/main'.
+
+nothing to commit, working tree clean
+
+sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (main)
+$ git checkout -B feature/lesson
+Switched to a new branch 'feature/lesson'
+
+sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
+$ touch test2.txt
+
+sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
+$ ls
+README.md  test2.txt
+
+sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
+$ git add test2.txt
+
+sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
+$ git commit -m "Add test2.txt to the branch"
+[feature/lesson ce0e907] Add test2.txt to the branch
+ 1 file changed, 0 insertions(+), 0 deletions(-)
+ create mode 100644 test2.txt
+
+Please make sure you have the correct access rights
+and the repository exists.
+
+sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (feature/lesson)
+$ git push -u origin feature/lesson
+
+Enumerating objects: 4, done.
+Counting objects: 100% (4/4), done.
+Delta compression using up to 12 threads
+Compressing objects: 100% (2/2), done.
+Writing objects: 100% (3/3), 312 bytes | 312.00 KiB/s, done.
+Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
+remote:
+remote: Create a pull request for 'feature/lesson' on GitHub by visiting
+remote:      https://github.com/sumeetskd/DSA/pull/new/feature/lesson
+remote:
+To https://github.com/sumeetskd/DSA.git
+ * [new branch]      feature/lesson -> feature/lesson
+branch 'feature/lesson' set up to track 'origin/feature/lesson'.
+
+
(END)
diff --git a/HeadRead.md b/HeadRead.md
new file mode 100644
index 0000000..95c625b
--- /dev/null
+++ b/HeadRead.md
@@ -0,0 +1,17 @@
+*These points provide an overview of how the "head" pointer works in Git to tra
ck the current branch and how it changes when switching branches and making comm
its.*
+
+**Here are the important points:**
+
+- The ".git" folder in a project is responsible for tracking changes across the
 project.
+- The "head" file inside the ".git" folder is a special pointer that indicates
the current branch you're working on.
+- To identify the current commit, you can navigate to the ".git" folder in the
terminal using the command "cd .git" and view the contents of the "HEAD" file us
ing the command "cat HEAD".
+- In Git, you typically work on a single branch at a time, and the branch infor
mation is stored in the "refs/heads" directory within the ".git" folder.
+- By switching branches using the "git checkout" command (e.g., "git checkout t
esting"), the "head" pointer moves to point to the new branch.
!q
/usr/bin/bash: line 1: q: command not found
!done  (press RETURN)
...skipping...
diff --git a/HeadRead.md b/HeadRead.md
new file mode 100644
index 0000000..95c625b
--- /dev/null
+++ b/HeadRead.md
@@ -0,0 +1,17 @@
+*These points provide an overview of how the "head" pointer works in Git to track the current branch and how it changes when switching branches and making commits.*
+
+**Here are the important points:**
+
+- The ".git" folder in a project is responsible for tracking changes across the project.
+- The "head" file inside the ".git" folder is a special pointer that indicates the current branch you're working on.
+- To identify the current commit, you can navigate to the ".git" folder in the terminal using the command "cd .git" and view the contents of the "HEAD" file using the command "cat HEAD".
+- In Git, you typically work on a single branch at a time, and the branch information is stored in the "refs/heads" directory within the ".git" folder.
+- By switching branches using the "git checkout" command (e.g., "git checkout testing"), the "head" pointer moves to point to the new branch.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git status
On branch git-notes
Your branch is up to date with 'origin/git-notes'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   README.md

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        gitdiff.md

no changes added to commit (use "git add" and/or "git commit -a")

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cat gitidff.md
cat: gitidff.md: No such file or directory

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
HeadRead.md  README.md  gitdiff.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ cat gitdiff.md
**Updating GIT DIFF**

Here are the important points from the provided text:

1. Great novels and programming code often undergo multiple drafts or revisions before reaching a satisfactory outcome.
2. Git provides a system of organization to revisit and compare changes in code.
3. The "git status" command shows which files have been changed, while "git diff" provides detailed information about the specific changes.
4. "git diff" compares the previous version of a file with the current version, highlighting additions and deletions.
5. In the example of a "CITIES.txt" file, "git diff" would show the specific cities that were removed and added between different versions.
6. "git diff" can be used to compare files, commits, and branches within the local repository.
7. Comparing files with "git diff" requires specifying the "head" as the first option and the file name.
8. Comparing commits with "git diff" involves using the commit IDs obtained from the "git log" command.
9. Comparing branches with "git diff" requires specifying the branch names as options.
10. "git diff" provides a visual representation of the changes, with lines starting with a minus symbol indicating the original content and lines with a plus symbol showing the new content.
11. Using "git diff" helps track changes, avoid mistakes, and keep up with updates in files, branches, and commits.

These points summarize the purpose and usage of the "git diff" command in Git for comparing changes in files, branches, and commits, enabling effective version control and tracking of code modifications.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git add .
warning: in the working copy of 'gitdiff.md', LF will be replaced by CRLF the next time Git touches it

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git commit -m 'adding files'
[git-notes 3ea47ea] adding files
 2 files changed, 18 insertions(+)
 create mode 100644 gitdiff.md

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git push
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 12 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 1.19 KiB | 1.19 MiB/s, done.
Total 4 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/sumeetskd/DSA.git
   0fcabc4..3ea47ea  git-notes -> git-notes

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ ls
HeadRead.md  README.md  gitdiff.md  gitnotes/  test2.txt

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame gitdiff.md
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  1) **Updating GIT DIFF**
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  2)
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  3) Here are the important points from the provided text:
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  4)
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  5) 1. Great novels and programming code often undergo multiple drafts or revisions before reaching a satisfactory outcome.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  6) 2. Git provides a system of organization to revisit and compare changes in code.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  7) 3. The "git status" command shows which files have been changed, while "git diff" provides detailed information about the specific changes.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  8) 4. "git diff" compares the previous version of a file with the current version, highlighting additions and deletions.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  9) 5. In the example of a 3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  9) 5. In the example of a
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  9) 5. In the example of a
"CITIES.txt" file, "git diff" would show the specific cities that were removed and added between different versions.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 10) 6. "git diff" can be used to compare files, commits, and branches within the local repository.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 11) 7. Comparing files with "git diff" requires specifying the "head" as the first option and the file name.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 12) 8. Comparing commits with "git diff" involves using the commit IDs obtained from the "git log" command.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 13) 9. Comparing branches with "git diff" requires specifying the branch names as options.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 14) 10. "git diff" provides a visual representation of the changes, with lines starting with a minus symbol indicating the original content and lines with a plus symbol showing the new content.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 15) 11. Using "git diff" helps track changes, avoid mistakes, and keep up with updates in files, branches, and commits.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 16)
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 17) These points summarize the purpose and usage of the "git diff" command in Git for comparing changes in files, branches, and commits, enabling effective version control and tracking of
sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame gitdiff.md 5,15
fatal: bad revision 'gitdiff.md'

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ gti blame -L gitdiff.md
bash: gti: command not found

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame -L gitdiff.md
usage: git blame [<options>] [<rev-opts>] [<rev>] [--] <file>

    <rev-opts> are documented in git-rev-list(1)

    --incremental         show blame entries as we find them, incrementally
    -b                    do not show object names of boundary commits (Default: off)
    --root                do not treat root commits as boundaries (Default: off)
    --show-stats          show work cost statistics
    --progress            force progress reporting
    --score-debug         show output score for blame entries
    -f, --show-name       show original filename (Default: auto)
    -n, --show-number     show original linenumber (Default: off)
    -p, --porcelain       show in a format designed for machine consumption
    --line-porcelain      show porcelain format with per-line commit information
    -c                    use the same output mode as git-annotate (Default: off)
    -t                    show raw timestamp (Default: off)
    -l                    show long commit SHA1 (Default: off)
    -s                    suppress author name and timestamp (Default: off)
    -e, --show-email      show author email instead of name (Default: off)
    -w                    ignore whitespace differences
    --ignore-rev <rev>    ignore <rev> when blaming
    --ignore-revs-file <file>
                          ignore revisions from <file>
    --color-lines         color redundant metadata from previous line differently
    --color-by-age        color lines by age
    --minimal             spend extra cycles to find better match
    -S <file>             use revisions from <file> instead of calling git-rev-list
    --contents <file>     use <file>'s contents as the final image
    -C[<score>]           find line copies within and across files
    -M[<score>]           find line movements within and across files
    -L <range>            process only line range <start>,<end> or function :<funcname>
    --abbrev[=<n>]        use <n> digits to display object names


sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame -L 5,15 gitdiff.md
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  5) 1. Great novels and programming code often undergo multiple drafts or revisions before reaching a satisfactory outcome.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  6) 2. Git provides a system of organization to revisit and compare changes in code.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  7) 3. The "git status" command shows which files have been changed, while "git diff" provides detailed information about the specific changes.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  8) 4. "git diff" compares the previous version of a file with the current version, highlighting additions and deletions.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  9) 5. In the example of a "CITIES.txt" file, "git diff" would show the specific cities that were removed and added between different versions.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 10) 6. "git diff" can be used to compare files, commits, and branches within the local repository.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 11) 7. Comparing files with "git diff" requires specifying the "head" as the first option and the file name.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 12) 8. Comparing commits with "git diff" involves using the commit IDs obtained from the "git log" command.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 13) 9. Comparing branches with "git diff" requires specifying the branch names as options.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame -L 23, gitdiff.md
fatal: file gitdiff.md has only 17 lines

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame -L 23 gitdiff.md
fatal: file gitdiff.md has only 17 lines

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame -L 4 gitdiff.md
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  4)
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  5) 1. Great novels and programming code often undergo multiple drafts or revisions before reaching a satisfactory outcome.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  6) 2. Git provides a system of organization to revisit and compare changes in code.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  7) 3. The "git status" command shows which files have been changed, while "git diff" provides detailed information about the specific changes.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  8) 4. "git diff" compares the previous version of a file with the current version, highlighting additions and deletions.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  9) 5. In the example of a "CITIES.txt" file, "git diff" would show the specific cities that were removed and added between different versions.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 10) 6. "git diff" can be used to compare files, commits, and branches within the local repository.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 11) 7. Comparing files with "git diff" requires specifying the "head" as the first option and the file name.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 12) 8. Comparing commits with "git diff" involves using the commit IDs obtained from the "git log" command.
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 13) 9. Comparing branches w
sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame -L 4,5 gitdiff.md
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 4)
3ea47ea9 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530 5) 1. Great novels and programming code often undergo multiple drafts or revisions before reaching a satisfactory outcome.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git blame -l gitdiff.md
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  1) **Updating GIT DIFF**
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  2)
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  3) Here are the important points from the provided text:
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  4)
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  5) 1. Great novels and programming code often undergo multiple drafts or revisions before reaching a satisfactory outcome.
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  6) 2. Git provides a system of organization to revisit and compare changes in code.
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  7) 3. The "git status" command shows which files have been changed, while "git diff" provides detailed information about the specific changes.
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  8) 4. "git diff" compares the previous version of a file with the current version, highlighting additions and deletions.
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  9) 5. In the example of a "CITIES.txt" file, "git diff" would show the specific cities that were removed and added between different versions.
:
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  1) **Updating GIT DIFF**
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  2)
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  3) Here are the important points from the provided text:
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  4)
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  5) 1. Great novels and programming code often undergo multiple drafts or revisions before reaching a satisfactory outcome.
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  6) 2. Git provides a system of organization to revisit and compare changes in code.
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  7) 3. The "git status" command shows which files have been changed, while "git diff" provides detailed information about the specific changes.
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  8) 4. "git diff" compares the previous version of a file with the current version, highlighting additions and deletions.
3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (Sumeet Kumar Das 2023-07-09 02:43:00 +0530  9) 5. In the example of a "CITIES.txt" file, "git diff" would show the specific cities that were removed and added between different versions.

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$ git log -p 3ea47ea915c246acd05ab7a7ce98f770eaac4ec3
commit 3ea47ea915c246acd05ab7a7ce98f770eaac4ec3 (HEAD -> git-notes, origin/git-notes)
Author: Sumeet Kumar Das <41441163+sumeetskd@users.noreply.github.com>
Date:   Sun Jul 9 02:43:00 2023 +0530

    adding files

diff --git a/README.md b/README.md
index b784b50..b68e850 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,3 @@
 #adding minor update!
 DSA Problems, Key Notes, etc
+GIT Important Notes
diff --git a/gitdiff.md b/gitdiff.md
new file mode 100644
index 0000000..7c62fe3
--- /dev/null
+++ b/gitdiff.md
@@ -0,0 +1,17 @@
+**Updating GIT DIFF**
+

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$

sumee@Sumeet MINGW64 ~/Downloads/GIT/DSA (git-notes)
$
